name: Links main workflow

on:
  pull_request:
    branches: master
  push:
    # TODO: change back to master
    branches: [master, e2e-tests-*]
  schedule:
    # Prime the caches every Monday
    - cron: 0 1 * * MON

jobs:
  rule-check:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
        ocaml-compiler:
          - 4.08.0

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - run: git diff-index --quiet HEAD --
        shell: bash

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - run: opam install -y ocamlformat.0.14.2

      - name: Ad-hoc rule check
        run: |
          eval $(opam config env)
          make rule-check
        shell: bash

  build-doc:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install system dependencies
        run: |
          sudo apt-get install -y python3-setuptools python3-pip
          pip3 install -U Sphinx
        shell: bash

      - name: Compile documentation
        run: make doc
        shell: bash

  interpreter:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
        ocaml-compiler:
          - 4.08.0

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - run: opam install -y ounit2

      - name: Install Links dependencies
        run: >-
          opam install
          ./links.opam
          --deps-only

      - name: Build Links from source
        run: |
          eval $(opam env)
          make all-ci
        shell: bash

      - name: Run interpreter testsuite
        run: |
          eval $(opam env)
          make tests
          ./run-tests nodb-unit-tests
        shell: bash

  postgres-mysql8-sqlite3:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
        ocaml-compiler:
          - 4.08.0

    runs-on: ${{ matrix.os }}

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: links
          POSTGRES_PASSWORD: links
        ports:
          - 5433:5432
      mysql:
        image: mysql:8.0
        env:
          MYSQL_USER: links
          MYSQL_PASSWORD: links
          MYSQL_ROOT_PASSWORD: links
          MYSQL_DATABASE: links
          MYSQL_ROOT_HOST: "%"
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install system dependencies
        run: sudo apt-get install -y libev-dev
        shell: bash

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - run: opam install -y conf-libev
      - run: opam install -y ounit2

      - name: Install Links dependencies
        run: >-
          opam install
          ./links.opam
          ./links-postgresql.opam
          ./links-mysql8.opam
          ./links-sqlite3.opam
          --deps-only
          --ignore-constraints-on=links

      - name: Build Links from source
        run: |
          eval $(opam env)
          make all-ci
        shell: bash

      - name: Run database testsuite
        run: |
          eval $(opam env)
          ./run-database-tests tests/database -d all
          ./run-database-tests tests/shredding -d all
          ./run-database-tests tests/relational-lenses -d all
          ./run-tests db-unit-tests
        env:
          # TODO(dhil): I do not know how to index into the
          # environments of either service. Until we figure out how to
          # do it, we will just duplicate information here.
          LINKS_POSTGRES_HOST: localhost
          LINKS_POSTGRES_USER: links
          LINKS_POSTGRES_PASSWORD: links
          LINKS_POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
          LINKS_MYSQL8_HOST: 127.0.0.1
          LINKS_MYSQL8_USER: links
          LINKS_MYSQL8_PASSWORD: links
          LINKS_MYSQL8_PORT: ${{ job.services.mysql.ports[3306] }}
        shell: bash

  links-mysql8_mysql57:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
        ocaml-compiler:
          - 4.08.0

    runs-on: ${{ matrix.os }}

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_USER: links
          MYSQL_PASSWORD: links
          MYSQL_ROOT_PASSWORD: links
          MYSQL_DATABASE: links
          MYSQL_ROOT_HOST: "%"
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Show MySQL client and server versions
        run: |
          mysql --version
          mysql -h 127.0.0.1 -P 3306 -uroot -plinks -e "SHOW VARIABLES LIKE '%version%';"
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install system dependencies
        run: sudo apt-get install -y libev-dev
        shell: bash

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - run: opam install -y conf-libev

      - name: Install Links dependencies
        run: >-
          opam install
          ./links.opam
          ./links-mysql8.opam
          --deps-only
          --ignore-constraints-on=links

      - name: Build Links from source
        run: |
          eval $(opam env)
          make all-ci
        shell: bash

      - name: Run database testsuite
        run: |
          eval $(opam env)
          ./run-database-tests tests/database -d mysql8
          ./run-database-tests tests/relational-lenses -d mysql8
        env:
          # TODO(dhil): I do not know how to index into the
          # environments of either service. Until we figure out how to
          # do it, we will just duplicate information here.
          LINKS_MYSQL8_HOST: 127.0.0.1
          LINKS_MYSQL8_USER: links
          LINKS_MYSQL8_PASSWORD: links
          LINKS_MYSQL8_PORT: ${{ job.services.mysql.ports[3306] }}
        shell: bash

  links-mysql_mysql57:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-18.04
        ocaml-compiler:
          - 4.08.0

    runs-on: ${{ matrix.os }}

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_USER: links
          MYSQL_PASSWORD: links
          MYSQL_ROOT_PASSWORD: links
          MYSQL_DATABASE: links
          MYSQL_ROOT_HOST: "%"
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install system dependencies
        run: sudo apt-get install -y libev-dev
        shell: bash

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - run: opam install -y conf-libev

      - name: Install Links dependencies
        run: >-
          opam install
          ./links.opam
          ./links-mysql.opam
          --deps-only
          --ignore-constraints-on=links

      - name: Build Links from source
        run: |
          eval $(opam env)
          make all-ci
        shell: bash

      - name: Run MySQL5.7 database testsuite
        run: |
          eval $(opam env)
          ./run-database-tests tests/database -d mysql
          ./run-database-tests tests/relational-lenses -d mysql
        env:
          # TODO(dhil): I do not know how to index into the
          # environments of either service. Until we figure out how to
          # do it, we will just duplicate information here.
          LINKS_MYSQL_HOST: 127.0.0.1
          LINKS_MYSQL_USER: links
          LINKS_MYSQL_PASSWORD: links
          LINKS_MYSQL_PORT: ${{ job.services.mysql.ports[3306] }}
        shell: bash

  webbrowser:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
        ocaml-compiler:
          - 4.08.0
        browser:
          - firefox
          - chrome
    runs-on: ${{ matrix.os }}
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: links
          POSTGRES_PASSWORD: links
        ports:
          - 5432:5432
    env:
      LINKS_BROWSER: ${{ matrix.browser }}
      NPM_DIR: tests/end-to-end
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - run: docker ps -a

      - run: |
          echo "database_args=localhost:${LINKS_POSTGRES_PORT}:links:"
          echo "database_args=localhost:${LINKS_POSTGRES_PORT}:links:" >> linksconfig
        env:
          LINKS_POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

      # Start
      - name: Install system dependencies
        run: sudo apt-get install -y libev-dev
        shell: bash

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - run: opam install -y conf-libev
      - run: opam install -y ounit2

      - name: Install Links dependencies
        run: >-
          opam install
          ./links.opam
          ./links-postgresql.opam
          ./links-mysql8.opam
          ./links-sqlite3.opam
          --deps-only
          --ignore-constraints-on=links

      - name: Build Links from source
        run: |
          eval $(opam env)
          make all-ci
        shell: bash

      # - name: Run database testsuite
      #   run: |
      #     eval $(opam env)
      #     ./run-database-tests tests/database -d all
      #     ./run-database-tests tests/shredding -d all
      #     ./run-database-tests tests/relational-lenses -d all
      #     ./run-tests db-unit-tests
      #   env:
      #     # TODO(dhil): I do not know how to index into the
      #     # environments of either service. Until we figure out how to
      #     # do it, we will just duplicate information here.
      #     LINKS_POSTGRES_HOST: localhost
      #     LINKS_POSTGRES_USER: links
      #     LINKS_POSTGRES_PASSWORD: links
      #     LINKS_POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
      #     LINKS_MYSQL8_HOST: 127.0.0.1
      #     LINKS_MYSQL8_USER: links
      #     LINKS_MYSQL8_PASSWORD: links
      #     LINKS_MYSQL8_PORT: ${{ job.services.mysql.ports[3306] }}
      #   shell: bash

      # End

      # - uses: actions/setup-node@v2
      # - run: npm install
      #   working-directory: ${{ env.NPM_DIR }}
      # - run: npm test
      #   working-directory: ${{ env.NPM_DIR }}
      #   env:
      #     # TODO(dhil): I do not know how to index into the
      #     # environments of either service. Until we figure out how to
      #     # do it, we will just duplicate information here.
      #     LINKS_POSTGRES_HOST: localhost
      #     LINKS_POSTGRES_USER: links
      #     LINKS_POSTGRES_PASSWORD: links
      #     LINKS_POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
      #     LINKS_MYSQL8_HOST: 127.0.0.1
      #     LINKS_MYSQL8_USER: links
      #     LINKS_MYSQL8_PASSWORD: links
      #     LINKS_MYSQL8_PORT: ${{ job.services.mysql.ports[3306] }}
      #     POSTGRES_USER: links
      #     POSTGRES_PASSWORD: links
      - name: Test Links server
        run: ../../links "../../examples/webserver/examples.links" --config='linksconfig'  --path=../../examples:/../../examples/games:../../examples/handlers:../../examples/dictionary:../../examples/games
        working-directory: ${{ env.NPM_DIR }}
        env:
          LINKS_POSTGRES_PASSWORD: links

  dbTestJS:
    strategy:
      matrix:
        os:
          - ubuntu-20.04
    runs-on: ${{ matrix.os }}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: links
          POSTGRES_PASSWORD: links
          POSTGRES_DB: links
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/checkout@v2
        with:
          repository: dhil/links-database-setup
          path: ./links-database-setup

      - name: Generate pgpass
        run: |
          echo "localhost:5432:links:links:links" >> ~/.pgpass
          chmod 600 ~/.pgpass

      - name: Populate database #2
        run: |
          for f in `ls *.sql`; do
            createdb -U links -O links ${f%.sql};
          done
          for f in `ls *.sql`; do psql -U links -d ${f%.sql} -h localhost < $f; done
        working-directory: links-database-setup
        env:
          PGPASSWORD: links

  postgres-job:
    # containers must run in Linux based operating systems
    runs-on: ubuntu-latest

    # service containers to run with `postgres-job`
    services:
      # label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:latest
        # service environment variables
        # `POSTGRES_HOST` is `postgres`
        env:
          # optional (defaults to `postgres`)
          POSTGRES_DB: links 
          # required
          POSTGRES_PASSWORD: postgres_password
          # optional (defaults to `5432`)
          POSTGRES_PORT: 5432
          # optional (defaults to `postgres`)
          POSTGRES_USER: postgres_user
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - uses: actions/checkout@v2
        with:
          repository: dhil/links-database-setup
          path: ./links-database-setup

      # queries database with postgres client
      # - name: Query database
      #   run: psql -h postgres -d links -U postgres_user -c 'SELECT 1;'
      #   env:
      #     # postgress password is required; alternatively, you can run:
      #     # `PGPASSWORD=postgres_password psql ...`
      #     PGPASSWORD: postgres_password

      - name: Populate database
        run: |
          for f in `ls *.sql`; do
            createdb -h postgres -U postgres_user -O postgres_user ${f%.sql};
          done
          for f in `ls *.sql`; do psql -h postgres -U postgres_user -d ${f%.sql} < $f; done
        working-directory: links-database-setup
        env:
          PGPASSWORD: postgres_password

      # queries database with postgres client
      - name: Query database
        run: psql -h postgres -d links -U postgres_user -c 'SELECT 1;'
        env:
          # postgress password is required; alternatively, you can run:
          # `PGPASSWORD=postgres_password psql ...`
          PGPASSWORD: postgres_password

  # dbTest:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os:
  #         - ubuntu-20.04
  #       ocaml-compiler:
  #         - 4.08.0
  #       browser:
  #         - firefox
  #         - chrome
  #   runs-on: ${{ matrix.os }}
  #   services:
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_USER: links
  #         POSTGRES_PASSWORD: links
  #         POSTGRES_DB: links
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #   env:
  #     LINKS_BROWSER: ${{ matrix.browser }}
  #     NPM_DIR: tests/end-to-end
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Install system dependencies
  #       run: sudo apt-get install -y libev-dev
  #       shell: bash

  #     - name: Use OCaml ${{ matrix.ocaml-compiler }}
  #       uses: ocaml/setup-ocaml@v2
  #       with:
  #         ocaml-compiler: ${{ matrix.ocaml-compiler }}

  #     - run: opam install -y conf-libev
  #     - run: opam install -y ounit2

  #     - name: Install Links dependencies
  #       run: >-
  #         opam install
  #         ./links.opam
  #         ./links-postgresql.opam
  #         ./links-mysql8.opam
  #         ./links-sqlite3.opam
  #         --deps-only
  #         --ignore-constraints-on=links

  #     - name: Build Links from source
  #       run: |
  #         eval $(opam env)
  #         make all-ci
  #       shell: bash

  #     - uses: actions/checkout@v2
  #       with:
  #         repository: dhil/links-database-setup
  #         path: ./links-database-setup

  #     - name: Generate pgpass
  #       run: |
  #         echo "localhost:5432:links:links:links" >> ~/.pgpass
  #         chmod 600 ~/.pgpass

  #     - name: Populate database #2
  #       run: |
  #         for f in `ls *.sql`; do
  #           dropdb -U links -h localhost ${f%.sql} -w
  #           createdb -O links ${f%.sql} -w;
  #         done
  #         for f in `ls *.sql`; do psql -w -U links -h localhost -d ${f%.sql} < $f; done
  #       working-directory: links-database-setup
  #       env:
  #         POSTGRES_USER: links
  #         POSTGRES_PASSWORD: links
  #         POSTGRES_DB: links

  #     - name: Populate database
  #       run: |
  #         ls
  #         bash dbsetup
  #       working-directory: links-database-setup
  #       env:
  #         POSTGRES_USER: links
  #         POSTGRES_PASSWORD: links
  #         POSTGRES_DB: links

  #     - run: npm install
  #       working-directory: ${{ env.NPM_DIR }}

  #     # - name: Generate linksconfig
  #     #   working-directory: ${{ env.NPM_DIR }}
  #     #   run: |
  #     #     echo "database_args=localhost:${LINKS_POSTGRES_PORT}:links:"
  #     #     echo "database_args=localhost:${LINKS_POSTGRES_PORT}:links:" >> linksconfig
  #     #   env:
  #     #     LINKS_POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

  #     - run: npm test
  #       working-directory: ${{ env.NPM_DIR }}
  #       env:
  #         LINKS_POSTGRES_HOST: localhost
  #         LINKS_POSTGRES_USER: links
  #         LINKS_POSTGRES_PASSWORD: links
  #         LINKS_POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
